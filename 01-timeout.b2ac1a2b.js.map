{"mappings":"AAsBS,IAAHA,OAAS,SAAAC,GACbC,QAAQC,IAAI,aAA0BC,OAALH,EAAK,kC,EAGlCI,OAASC,WAAWN,OAAQ,IAAM,KAElCO,iBAAmBC,KAAKC,SAAW,GACzCP,QAAQC,IAAII,kBAERA,kBACFG,aAAaL,QAIgB,IAAzBM,YAAc,SAAAV,GAClBC,QAAQC,IAAI,aAAsBC,OAATH,EAAK,MAAeG,OAAXQ,KAAKC,O,EAGnCC,aAAeC,YAAYJ,YAAa,IAAM,KAChDJ,kBACFS,cAAcF","sources":["src/js/01-timeout.js"],"sourcesContent":["// const logMessage = () => {\n//   console.log('Лог при виклику callback-функціїї через 3 секунди');\n// };\n\n// console.log('до виклику setTimeout');\n\n// setTimeout(\n//   x => {\n//     console.log(x);\n//     console.log('в середині функціїї setTimeout');\n//   },\n//   2000,\n//   'dsads'\n// );\n\n// console.log('після виклику setTimeout');\n// for (let i = 0; i < 10000; i++) {\n//   console.log(i);\n// }\n\n//як знімати settimeout()\n\nconst logger = time => {\n  console.log(`Лог через ${time}, тому що не відмінили таймаут`);\n};\n\nconst timeId = setTimeout(logger, 2000, 2000); // першим передаэться функція яку відкладаємо, другим час, третім і тд. аргументи\n\nconst shouldCancelTime = Math.random() > 0.3;\nconsole.log(shouldCancelTime);\n\nif (shouldCancelTime) {\n  clearTimeout(timeId);\n}\n\n// нижче інтервальний виклик функціїї\nconst loggerInetr = time => {\n  console.log(`Лог кожні ${time} -${Date.now()}`);\n};\n\nconst timeIdIntert = setInterval(loggerInetr, 3000, 3000);\nif (shouldCancelTime) {\n  clearInterval(timeIdIntert);\n}\n"],"names":["logger","time","console","log","concat","timeId","setTimeout","shouldCancelTime","Math","random","clearTimeout","loggerInetr","Date","now","timeIdIntert","setInterval","clearInterval"],"version":3,"file":"01-timeout.b2ac1a2b.js.map"}