{"mappings":"YAAA,IAAMA,EAAS,CAAC,aAAc,UAAW,SAAU,SAAU,cAEvDC,EAAO,CACXC,QAASC,SAASC,cAAc,gBAChCC,OAAQF,SAASC,cAAc,WAC/BE,SAAUH,SAASC,cAAc,aACjCG,YAAaJ,SAASC,cAAc,sBAElCI,EAAc,EA2BlB,SAASC,EAAkBC,GACzBT,EAAKI,OAAOM,YAAcD,C,CAG5B,SAASE,EAAoBF,GAC3BT,EAAKK,SAASK,YAAcD,C,CA9B9BT,EAAKC,QAAQW,iBAAiB,SAAS,WACrC,IAAMC,EAAWd,EAAOe,KAAI,SAAAC,G,OAsC9B,SAAaA,GACX,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAQkBC,EAAKC,EARjBC,GAQYF,EARQ,IAQHC,EARS,KAS3BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAPlDM,YAAW,WACTR,EAAQ,CAAEF,QAAOM,Q,GAChBA,E,IA5CgCK,CAAIX,E,IACzCR,GAAe,EAEfC,IACAG,EAAqB,uCAYvB,SAAyBE,GAEgCG,QAA/CW,KAAKd,GAAUe,MAAK,SAAAC,G,IAAGd,EAAKc,EAALd,MAAOM,EAAIQ,EAAJR,KACpCb,EAAkB,WAAyCsB,OAAvBf,EAAM,mBAAiCe,OAALT,EAAK,UAa/E,SAA4BQ,G,IAAEd,EAAFc,EAAEd,MAAOM,EAATQ,EAASR,KAAMU,EAAfF,EAAeG,YACnCC,EAAK,WAAkCH,OAAvBC,EAAY,aAA4BD,OAAjBf,EAAM,aAAgBe,OAALT,EAAK,cAEnErB,EAAKM,YAAY4B,mBAAmB,YAAaD,E,CAfzBE,CAAH,CAAEpB,QAAOM,OAAMW,YAAAzB,G,IAfL6B,CAAfvB,GAIlB,SAA0BA,GAEUG,QAA1BqB,IAAIxB,GAAUe,MAAK,SAAAU,GACzB3B,EAAqB,mC,IANvB4B,CAAiB1B,E","sources":["src/js/08-racetrack.js"],"sourcesContent":["const horses = ['Secretarit', 'Eclipse', 'Bullet', 'Rocket', 'Flying Fox'];\n\nconst refs = {\n  raceBtn: document.querySelector('.js-race-btn'),\n  winner: document.querySelector('.winner'),\n  progress: document.querySelector('.progress'),\n  resultTable: document.querySelector('.js-results-table'),\n};\nlet raceCounter = 0;\n\nrefs.raceBtn.addEventListener('click', () => {\n  const promises = horses.map(horse => run(horse));\n  raceCounter += 1;\n\n  updateWinnerField();\n  updateProgressField(`Заїзд почався ставки не приймаються`);\n  determineWinner(promises);\n  waitForAllHorses(promises);\n});\n\nfunction waitForAllHorses(promises) {\n  //Promise.all() повертає масив всіх виконаних промісів\n  Promise.all(promises).then(x => {\n    updateProgressField(`Заїзд закінчен, приймаємо ставки`);\n  });\n}\n\nfunction determineWinner(promises) {\n  //Promise.race();  цей метод промісу повертає проміс який виконався швидше за інших\n  Promise.race(promises).then(({ horse, time }) => {\n    updateWinnerField(`Переміг ${horse}, фінішував за ${time} часу`);\n    updateResultsTable({ horse, time, raceCounter });\n  });\n}\n\nfunction updateWinnerField(message) {\n  refs.winner.textContent = message;\n}\n\nfunction updateProgressField(message) {\n  refs.progress.textContent = message;\n}\n\nfunction updateResultsTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n\n  refs.resultTable.insertAdjacentHTML('beforeend', tr); // помилка із за цього(треба розібратись чтому не иалюється таблиця ((закінчив на 1:52)))\n}\n\nfunction run(horse) {\n  return new Promise((resolve, reject) => {\n    const time = getRanomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nfunction getRanomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"names":["$181146251e264a74$var$horses","$181146251e264a74$var$refs","raceBtn","document","querySelector","winner","progress","resultTable","$181146251e264a74$var$raceCounter","$181146251e264a74$var$updateWinnerField","message","textContent","$181146251e264a74$var$updateProgressField","addEventListener","promises","map","horse","Promise","resolve","reject","min","max","time","Math","floor","random","setTimeout","$181146251e264a74$var$run","race","then","param","concat","raceCounter1","raceCounter","tr","insertAdjacentHTML","$181146251e264a74$var$updateResultsTable","$181146251e264a74$var$determineWinner","all","x","$181146251e264a74$var$waitForAllHorses"],"version":3,"file":"08-racetrack.8ba6a6de.js.map"}